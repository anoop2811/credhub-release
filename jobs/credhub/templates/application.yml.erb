<%

  CONFIG_DIR = "/var/vcap/jobs/credhub/config"

  application_config = {}

  # Server TLS Config
  server_config = {
    port: p("credhub.port")
    ssl: {
      "enabled" => true,
      "key-store" => "#{CONFIG_DIR}/cacerts.jks",
      "key-password" => "KEY_STORE_PASSWORD_PLACEHOLDER",
      "key-alias" => "credhub_tls_cert",
      "ciphers" => "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384"
    }
  }

  # mTLS Config
  if_p('credhub.authentication.mutual_tls.trusted_cas') do |cas|
    server_config["ssl"]["client-auth"] = "want"
    server_config["ssl"]["trust-store"] = "#{CONFIG_DIR}/mtls_trust_store.jks"
    server_config["ssl"]["trust-store-password"] = "MTLS_TRUST_STORE_PASSWORD_PLACEHOLDER"
    server_config["ssl"]["trust-store-type"] = "JKS"
  end

  application_config["server"] = server_config

  # Security Config
  application_config["security"] = {
    "security" => {
      "oauth2" => {
        "resource" => {
          "jwt" => {
            "key-value" => p("credhub.authentication.uaa.verification_key")
          }
        }
      }
    }
  }

  # Database Config
  flyway_locations = ["classpath:/db/migration/common"]

  datastorage_type = p("credhub.data_storage.type")

  if datastorage_type == "in-memory"
      flyway_locations << "classpath:/db/migration/h2"
  elsif datastorage_type == "postgres" || datastorage_type == "mysql"
      db_params = ["host", "port", "database"]
        .map {|name| "credhub.data_storage.#{name}"}
        .map {|property| p(property)}
      jdbc_driver = datastorage_type == "postgres" ? "postgresql" : "mariadb"
      db_params.unshift(jdbc_driver)

      application_config["spring"] = {
        datasource: {
          username: p('credhub.data_storage.username'),
          password: '"' + p('credhub.data_storage.password') + '"', # force string type, guard against special char parsing
          url: sprintf "jdbc:%s://%s:%s/%s?autoReconnect=true", *db_params
        }
      }
      flyway_locations << "classpath:/db/migration/#{datastorage_type}"
  else
    raise ArgumentError, 'credhub.data_storage.type must be set to "mysql", "postgres", or "in-memory".'

  if datastorage_type == "mysql"
    datasource_url = application_config["spring"]["datasource"]["url"]

    if_p("credhub.data_storage.require_tls") do |require_tls|
      datasource_url << "&useSSL=true&requireSSL=true&verifyServerCertificate=true" if require_tls
    end

    if_p("credhub.data_storage.tls_ca") do |tls_cas|
      datasource_url << "&trustCertificateKeyStorePassword=KEY_STORE_PASSWORD_PLACEHOLDER"
      datasource_url << "&trustCertificateKeyStoreUrl=#{CONFIG_DIR}/db_trust_store.jks"
    end

    application_config["spring"]["datasource"]["url"] = datasource_url
  end

  application_config["spring"]["jpa"] = {
    "hibernate" => {
      "ddl-auto" => "validate"
    }
  }

  application_config["flyway"] = {
    "locations" => flyway_locations
  }

  # Encryption Config

  # need to do all error handling before

  encryption_keys = p("credhub.encryption.keys")
  encryption_providers = p("credhub.encryption.providers")
  active_keys = encryption_keys.select {|key| key["active"]}

  # technically not true: we only are not supporting migration between provider types, not names
  # I can have two providers with different names but same type
  if encryption_keys.collect{|k| k["provider_name"]}.uniq.count > 1
    raise
      "Data migration between encryption providers is not currently supported. Please update your manifest to use a single encryption provider."
  end

  if active_keys.empty? || active_keys.size > 1
    raise
      "Exactly one encryption key must be marked as active in the deployment manifest. Please update your configuration to proceed."
  end

  provider_types = encryption_providers.collect{|p| p["type"]}.uniq

  if provider_types & ["hsm",

  def get_provider_for_encryption_key(providers, key)
    providers.select {|p| p["name"] == k["provider_name"]}.first["type"]
  end

  encryption_keys.each do |k|
    k["provider"] = get_provider_for_encryption_key(encryption_providers, k)
    k.delete "provider_name"
    k["encryption-key-name"] = k.delete "encryption_key_name" if k.key?("encryption_key_name")
    k["encryption-key-password"] = k.delete "encryption_key_password" if k.key?("encryption_key_password")
    k["dev-key"] = k.delete "dev_key" if k.key?("dev_key")
  end

  # Logging Config
  application_config["logging"]["config"] = "#{CONFIG_DIR}/log4j2.properties"

  application_config.to_yaml
%>


  datasource_username = '# credhub.data_storage.username not set in your bosh deployment'
  datasource_password = '# credhub.data_storage.password not set in your bosh deployment'
  datasource_url = ''

  if_p('credhub.data_storage.username') do |username|
    datasource_username = username
  end

  if_p('credhub.data_storage.password') do |password|
    datasource_password = '"' + password + '"' # force string type, guard against special char parsing
  end

  def have_tls_ca
    begin
      return p('credhub.data_storage.tls_ca').length > 0
    rescue UnknownProperty
      return false
    end
  end

  case p("credhub.data_storage.type")
    when 'in-memory'
      datasource_url = "jdbc:h2:mem:#{p("credhub.data_storage.database")}"
      flyway_location = 'h2'
    when 'postgres'
      datasource_url = "jdbc:postgresql://#{p("credhub.data_storage.host")}:#{p("credhub.data_storage.port")}/#{p("credhub.data_storage.database")}?autoReconnect=true"
      flyway_location = 'postgres'
    when 'mysql'
      datasource_url = "jdbc:mariadb://#{p("credhub.data_storage.host")}:#{p("credhub.data_storage.port")}/#{p("credhub.data_storage.database")}?autoReconnect=true"
      flyway_location = 'mysql'

      case p('credhub.data_storage.require_tls')
        when true
          datasource_url << "&useSSL=true&requireSSL=true&verifyServerCertificate=true"
          if have_tls_ca
            datasource_url << "&trustCertificateKeyStorePassword=KEY_STORE_PASSWORD_PLACEHOLDER"
            datasource_url << "&trustCertificateKeyStoreUrl=/var/vcap/jobs/credhub/config/db_trust_store.jks"
          end
        when false
          # no op
        else
          raise ArgumentError, "credhub.data_storage.require_tls (#{p('credhub.data_storage.require_tls')}) must be set to \"true\" or \"false\"."
      end
    else
      raise ArgumentError, 'credhub.data_storage.type must be set to "mysql", "postgres", or "in-memory".'
  end

  flyway_locations = ['classpath:/db/migration/common', "classpath:/db/migration/#{flyway_location}"]

  encryption_keys = p('credhub.encryption.keys')
  active_keys = encryption_keys.select { |key| key['active'] }
  active_key = active_keys.first

  if encryption_keys.collect{|e| e['provider_name']}.uniq.count > 1
    raise ArgumentError,
      "Data migration between encryption providers is not currently supported. Please update your manifest to use a single encryption provider."
  end

  if active_keys.empty? || active_keys.size > 1
    raise ArgumentError,
      "Exactly one encryption key must be marked as active in the deployment manifest. Please update your configuration to proceed."
  end

  p('credhub.encryption.providers').each do |provider|
    if !%w[hsm dsm internal].include?(provider['type'])
      raise ArgumentError,
        'The provided encryption provider type is not valid. Valid provider types are "hsm", "dsm", and "internal".'
    end
  end

  active_provider_name = active_key['provider_name']
  active_provider = p('credhub.encryption.providers').find { |provider| provider['name'] == active_provider_name }

  def invalid_dev_key?(dev_key)
    return false if dev_key.nil?

    dev_key[/\H/] || dev_key.size != 32
  end

  length_of_leading_document_separator_to_yaml_adds = 4

  jwt_verification_key = { 'security' => { 'oauth2' => { 'resource' => { 'jwt' => { 'key-value' => p("credhub.authentication.uaa.verification_key") } } } } }.to_yaml
  jwt_verification_key = jwt_verification_key[length_of_leading_document_separator_to_yaml_adds, jwt_verification_key.length]

  key_array = encryption_keys.map do |input_key|
    {}.tap do |output_key|
      output_key['active'] = input_key['active'] if input_key['active']
      output_key['provider-name'] = input_key['provider_name'] if input_key['provider_name']
      output_key['encryption-key-name'] = input_key['encryption_key_name'] if input_key['encryption_key_name']

      if input_key.has_key?('dev_key') && input_key.has_key?('encryption_password')
        raise ArgumentError, "You must specify either an encryption_password or dev_key, not both. Please update your manifest and retry your request."
      end

      if input_key.has_key?('dev_key')
        if invalid_dev_key?(input_key['dev_key'])
          raise ArgumentError, "credhub.encryption.dev_key is not valid (must be 128 bit hexadecimal string)."
        else
          output_key['dev-key'] = input_key['dev_key']
        end
      end

      if input_key.has_key?('encryption_password')
        if input_key['encryption_password'].nil? || input_key['encryption_password'].empty?
          raise ArgumentError, "credhub.encryption.encryption_password is not valid (must not be empty if provided)."
        elsif input_key['encryption_password'].length < 20
          raise ArgumentError, "The encryption_password value must be at least 20 characters in length. Please update and redeploy."
        else
          output_key['encryption_password'] = input_key['encryption_password']
        end
      end
    end
  end

  encryption_section = {
    'encryption' => {
      'provider' => active_provider['type'],
      'keys' => key_array
    }
  }.to_yaml
  encryption_section = encryption_section[length_of_leading_document_separator_to_yaml_adds, encryption_section.length]

  supports_mtls = false
  if_p('credhub.authentication.mutual_tls.trusted_cas') do |cas|
    supports_mtls = !cas.empty?
  end
%>
---
server:
  port: <%= p("credhub.port") %>
  ssl:
    enabled: true
    key-store: /var/vcap/jobs/credhub/config/cacerts.jks
    key-password: KEY_STORE_PASSWORD_PLACEHOLDER
    key-alias: credhub_tls_cert
    ciphers: ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384
    <% if supports_mtls %>
    client-auth: want
    trust-store: /var/vcap/jobs/credhub/config/mtls_trust_store.jks
    trust-store-password: MTLS_TRUST_STORE_PASSWORD_PLACEHOLDER
    trust-store-type: JKS
    <% end %>

<%= jwt_verification_key %>
auth-server:
  url: <%= p("credhub.authentication.uaa.url") %>

spring:
  datasource:
    username: <%= datasource_username %>
    password: <%= datasource_password %>
    url: <%= datasource_url %>
  jpa:
    hibernate:
      ddl-auto: validate

flyway:
  locations: <%= flyway_locations %>

logging:
  config: /var/vcap/jobs/credhub/config/log4j2.properties

<%= encryption_section %>

hsm:
  partition: <%= active_provider['partition'] %>
  partition-password: <%= active_provider['partition_password'] %>
