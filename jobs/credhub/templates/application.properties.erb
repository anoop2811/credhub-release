server.port=<%= p("credhub.port") %>
auth-server.url=<%= p("credhub.user_management.uaa.url") %>

<% active_key = p('credhub.encryption.keys').find { |key| key.key?('active') } %>
<% active_provider_name = active_key['provider_name'] %>
<% active_encryption_key_name = active_key['encryption_key_name'] %>
<% active_dev_key = active_key['dev_key'] %>
<% active_provider = p('credhub.encryption.providers').find { |provider| provider['name'] == active_provider_name } %>

<% if active_provider['type'] == 'hsm' %>
encryption.provider=hsm
hsm.partition=<%= active_provider['partition'] %>
hsm.partition-password=<%= active_provider['partition_password'] %>
hsm.encryption-key-name=<%= active_encryption_key_name %>
<% elsif active_provider['type'] == 'dsm' %>
encryption.provider=dsm
dsm.encryption-key-name=<%= active_encryption_key_name %>
<% elsif active_provider['type'] == 'dev_internal' %>
<%
def invalid_dev_key?(dev_key)
  return false if dev_key.nil?

  dev_key[/\H/] || dev_key.size != 32
end
%>

<% raise ArgumentError, "credhub.encryption.dev_key is not valid (must be 128 bit hexadecimal string)." if invalid_dev_key?(active_dev_key) %>
encryption.provider=dev_internal
encryption.dev-key=<%= active_dev_key %>
%>
<% end %>

<% if_p('credhub.data_storage.username') do %>
spring.datasource.username=<%= p("credhub.data_storage.username") %>
<% if_p('credhub.data_storage.password') do %>
spring.datasource.password=<%= p("credhub.data_storage.password") %>
<% end %>
<% end %>
spring.jpa.hibernate.ddl-auto=validate

<%
def have_tls_ca
  begin
    return p('credhub.data_storage.tls_ca').length > 0
  rescue UnknownProperty
    return false
  end
end

case p("credhub.data_storage.type")
  when 'in-memory'
    @url = "jdbc:h2:mem:#{p("credhub.data_storage.database")}"
    @flyway_location = 'h2'
  when 'postgres'
    @url = "jdbc:postgresql://#{p("credhub.data_storage.host")}:#{p("credhub.data_storage.port")}/#{p("credhub.data_storage.database")}?autoReconnect=true"
    @flyway_location = 'postgres'
  when 'mysql'
    @url = "jdbc:mysql://#{p("credhub.data_storage.host")}:#{p("credhub.data_storage.port")}/#{p("credhub.data_storage.database")}?autoReconnect=true"
    @flyway_location = 'mysql'

    case p('credhub.data_storage.require_tls')
      when true
        @url << "&useSSL=true&requireSSL=true&verifyServerCertificate=true"
        if have_tls_ca
          @url << "&trustCertificateKeyStorePassword=KEY_STORE_PASSWORD_PLACEHOLDER"
          @url << "&trustCertificateKeyStoreUrl=file:///var/vcap/jobs/credhub/config/db_trust_store.jks"
        end
      when false
        # no op
      else
        raise ArgumentError, "credhub.data_storage.require_tls (#{p('credhub.data_storage.require_tls')}) must be set to \"true\" or \"false\"."
    end
  else
    raise ArgumentError, 'credhub.data_storage.type must be set to "mysql", "postgres", or "in-memory".'
end
%>

spring.datasource.url=<%=@url%>

server.ssl.enabled=true
server.ssl.key-store=/var/vcap/jobs/credhub/config/cacerts.jks
server.ssl.key-password=KEY_STORE_PASSWORD_PLACEHOLDER
server.ssl.key-alias=credhub_tls_cert
server.ssl.ciphers=ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384

flyway.locations=classpath:/db/migration/common,classpath:/db/migration/<%=@flyway_location%>

security.oauth2.resource.jwt.key-value=<%= p("credhub.user_management.uaa.verification_key").split("\n").map(&:strip).join() %>

logging.config=/var/vcap/jobs/credhub/config/log4j2.properties
