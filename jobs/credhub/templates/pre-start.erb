#!/bin/bash

set -eu

CERT_FILE=/var/vcap/jobs/credhub/config/cert.crt
PRIV_KEY_FILE=/var/vcap/jobs/credhub/config/priv.key
DATABASE_CA_CERT=/var/vcap/jobs/credhub/config/database_ca.crt
KEYSTORE_PASSWORD=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c32)
JAVA_HOME=/var/vcap/packages/openjdk_1.8.0/jdk

chown -R vcap /var/vcap/jobs/credhub/config
chmod 700 /var/vcap/jobs/credhub/config

<% active_key = p('credhub.encryption.keys').find { |key| key.key?('active') } %>
<% active_provider_name = active_key['provider_name'] %>
<% active_provider = p('credhub.encryption.providers').find { |provider| provider['name'] == active_provider_name } %>

<%
  begin
    p('credhub.tls.certificate')
    p('credhub.tls.private_key')
  rescue UnknownProperty
    raise "credhub.tls.certificate and credhub.tls.private_key must both be set."
  end
%>

function init_keystore_and_certs() {
  echo "Updating application.yml"
  sed -i "s/KEY_STORE_PASSWORD_PLACEHOLDER/${KEYSTORE_PASSWORD}/g" /var/vcap/jobs/credhub/config/application.yml
  echo "Cleaning up cert, private key, and database cert files."
  rm -f $CERT_FILE $PRIV_KEY_FILE $DATABASE_CA_CERT

  cat > $CERT_FILE <<EOL
<%= p('credhub.tls.certificate') %>
EOL

  cat > $PRIV_KEY_FILE <<EOL
<%= p('credhub.tls.private_key') %>
EOL

  <% if_p('credhub.data_storage.tls_ca') do |tls_ca| %>

  cat > $DATABASE_CA_CERT <<EOL
<%= tls_ca %>
EOL

  <% end %>
  echo "Installing certs."
  /var/vcap/jobs/credhub/bin/install_crt.sh $CERT_FILE $PRIV_KEY_FILE $DATABASE_CA_CERT $KEYSTORE_PASSWORD
}

if [ `grep KEY_STORE_PASSWORD_PLACEHOLDER /var/vcap/jobs/credhub/config/application.yml | wc -l` -eq 0 ]; then
  echo "Keystore appears to be initialized. Skipping keystore and cert initialization."
else
  echo "Keystore appears to be uninitialized. Setting up keystore and installing certs."
  init_keystore_and_certs
fi

<% if active_provider['type'] == 'hsm' %>
cat > /var/vcap/jobs/credhub/config/hsm_cert.pem <<EOL
<% active_provider['servers'].each do |hsm| %>
<%= hsm['certificate'] %>
<% end %>
EOL

cat > /var/vcap/jobs/credhub/config/client_cert.pem <<EOL
<%= active_provider['client_certificate'] %>
EOL

cat > /var/vcap/jobs/credhub/config/client_key.pem <<EOL
<%= active_provider['client_key'] %>
EOL

ln -f -s /var/vcap/jobs/credhub/config/encryption.conf /etc/Chrystoki.conf

cp /var/vcap/packages/lunaclient/jsp/lib/LunaProvider.jar $JAVA_HOME/jre/lib/ext/
cp /var/vcap/packages/lunaclient/jsp/lib/libLunaAPI.so $JAVA_HOME/jre/lib/ext/

# this is where we do the HA HSM magic - but only one time!
PATH=$PATH:/var/vcap/packages/lunaclient/bin
if [ $(vtl haAdmin show | grep -c 'Group Members') -eq 0 ]; then
echo "HSM HA appears to be uninitialized. Performing HA HSM setup."
<%
    require 'securerandom'

hsm_servers = active_provider['servers']
primary_server = hsm_servers.shift
primary_serial_number = primary_server['partition_serial_number']
ha_group_label = "credhub-#{SecureRandom.uuid}"
%>

echo "Creating new HA group"
echo "Executing command: echo copy | vtl haAdmin newGroup -label "<%= ha_group_label %>" -serialNum <%= primary_serial_number %> -password <%= active_provider['partition_password'] %>"
NEW_GROUP_OUTPUT=$(echo copy | vtl haAdmin newGroup -label "<%= ha_group_label %>" -serialNum <%= primary_serial_number %> -password <%= active_provider['partition_password'] %>)
GROUPID=$(echo $NEW_GROUP_OUTPUT | grep -o -E 'HA Group Number: .*' | awk '{print $4}')

echo "Adding members to HA group"
<% hsm_servers.each do |hsm_server| %>
echo "Adding <%= hsm_server['partition_serial_number'] %> to HSM group"
echo "Excuting command: echo copy | vtl haAdmin addMember -group $GROUPID -serialNum <%= hsm_server['partition_serial_number'] %> -password <%= active_provider['partition_password'] %>"
echo copy | vtl haAdmin addMember -group $GROUPID -serialNum <%= hsm_server['partition_serial_number'] %> -password <%= active_provider['partition_password'] %>
echo "Got status code: $?"
<% end %>
echo "Synchronizing HA group."
vtl haAdmin synchronize -group $GROUPID -password <%= active_provider['partition_password'] %>
echo "Got status code: $?"

echo "setup autorecovery retries"
vtl haAdmin autoRecovery -retry -1
echo "Got status code: $?"
echo "setup autorecovery interval"
vtl haAdmin autoRecovery -interval 60
echo "Got status code: $?"

echo "setup HA logging"
vtl haAdmin HALog -enable -path /var/vcap/sys/log/credhub/
echo "Got status code: $?"
else
  echo "HSM HA appears to be initialized. Skipping HSM HA setup."
fi

<% elsif active_provider['type'] == 'dsm' %>
dpkg -i /var/vcap/packages/dsm-client/libapr1_1.5.0-1_amd64.deb
dpkg -i /var/vcap/packages/dsm-client/dsm-client_1.2.10136.1262.DEBIAN_amd64.deb

cp /usr/lib/dsm/dsm-advapi-1.0.jar $JAVA_HOME/jre/lib/ext/

ln -f -s /var/vcap/jobs/credhub/config/encryption.conf /etc/dsm/client.conf
<% (active_provider['servers'] || []).each do |server| %>
HOST_PRIVATE_KEY_FILE=/var/vcap/jobs/credhub/config/<%= server['host'] %>.pem

cat > $HOST_PRIVATE_KEY_FILE <<EOL
<%= server['ssh_private_key'] %>
EOL

chmod 400 $HOST_PRIVATE_KEY_FILE

DSMUTIL_OUTPUT=$(ssh -oStrictHostKeyChecking=no -i $HOST_PRIVATE_KEY_FILE <%= server['user'] %>@<%= server['host'] %> "dsmutil agent create -u ${HOSTNAME} -p <%= server['partition'] %>")

if [[ "$DSMUTIL_OUTPUT" =~ ([0-9]+) ]]; then
  PIN=${BASH_REMATCH[0]}
else
  exit 1
fi

dsmcl register -p "$PIN"

rm $HOST_PRIVATE_KEY_FILE

<% end %>
<% end %>
